#include <iostream>
#include <conio.h>
#include <windows.h>
#include <ctime>
#include <stdlib.h>

using namespace std;

void mapmake(char**, int, int);

void MapClear(char** map, int mapY, int mapX) {
	for (int i = 0; i < mapY; i++) {
		for (int j = 0; j < mapX; j++) {
			if (map[i][j] == '.') {
				map[i][j] = ' ';
			}
		}
	}
}

void ShowMap(char** map, int  mapY, int  mapX) {
	for (int i = 0; i < mapY; i++) {
		for (int j = 0; j < mapX; j++) {
			cout << map[i][j];
		}
		cout << endl;
	}
	cout << endl;
}

void printStuff(char** map, int mapY, int mapX) {
	Sleep(95);
	HANDLE hd = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD cd;
	cd.X = 0;
	cd.Y = 0;
	SetConsoleCursorPosition(hd, cd);
	ShowMap(map, mapY, mapX);
}

void enemy_spawn(char** map, int& enemyX, int& enemyY) {
	bool enemy_spawned = false;
	while (enemy_spawned != true) {
		if (map[enemyY][enemyX] != '#' && map[enemyY][enemyX] != '|' && map[enemyY][enemyY] != 'H') {
			enemy_spawned = true;
			map[enemyY][enemyX] = '0';
		}
		else {
			enemyX = rand() % 31, enemyY = rand() % 21;
		}
	}
}

void gameover(int score, int& temp) {
	Sleep(1000);
	system("cls");
	cout << "GAME OVER!" << endl;
	cout << "Your SCORE: " << score;
	temp++;
}

void enemy_move(char** map, int& enemyX, int& enemyY, int heroY, int heroX, int score, int mapY, int mapX, int& temp) {
	srand(static_cast<unsigned int>(time(0)));
	int direction;
	direction = rand() % 4;
	switch (direction) {
	case 0: {
		if (map[enemyY + 1][enemyX] == '0') {
			gameover(score, temp);
			map[enemyY + 1][enemyX] = ' ';
			map[enemyY][enemyX] = ' ';
			MapClear(map, mapY, mapX);
			break;
		}
		else if (map[enemyY + 1][enemyX] != '#' && map[enemyY + 1][enemyX] != '|') {
			enemyY++;
			if (enemyY >= 0) {
				map[enemyY - 1][enemyX] = '.';
				map[enemyY][enemyX] = '0';
			}
			Sleep(100);
		}
		break;
	}
	case 1: {
		if (map[enemyY - 1][enemyX] == '0') {
			gameover(score, temp);
			map[enemyY - 1][enemyX] = ' ';
			map[enemyY][enemyX] = ' ';
			MapClear(map, mapY, mapX);
			break;
		}
		else if (map[enemyY - 1][enemyX] != '#' && map[enemyY - 1][enemyX] != '|') {
			enemyY--;
			if (enemyY >= 0) {
				map[enemyY + 1][enemyX] = '.';
				map[enemyY][enemyX] = '0';
			}
			Sleep(100);

		}
		break;
	}
	case 2: {
		if (map[enemyY][enemyX + 1] == '0') {
			gameover(score, temp);
			map[enemyY][enemyX + 1] = ' ';
			map[enemyY][enemyX] = ' ';
			MapClear(map, mapY, mapX);
			break;
		}
		else if (map[enemyY][enemyX + 1] != '#' && map[enemyY][enemyX + 1] != '|') {
			enemyX++;
			if (enemyX >= 0) {
				map[enemyY][enemyX - 1] = '.';
				map[enemyY][enemyX] = '0';
			}
			Sleep(100);
		}
		break;
	}
	case 3: {
		if (map[enemyY][enemyX - 1] == '0') {
			gameover(score, temp);
			map[enemyY][enemyX - 1] = ' ';
			map[enemyY][enemyX] = ' ';
			MapClear(map, mapY, mapX);
			break;
		}
		else if (map[enemyY][enemyX - 1] != '#' && map[enemyY][enemyX - 1] != '|') {
			enemyX--;
			if (enemyX >= 0) {
				map[enemyY][enemyX + 1] = '.';
				map[enemyY][enemyX] = '0';
			}
			Sleep(100);
		}
		break;
	}
	}
}

void movements(char** map, int mapY, int mapX, int enemyX, int enemyY) {

	system("cls");
	char key;
	int heroX = 3, heroY = 2, score = 0;
	int temp(0);
	map[heroY][heroX] = 'H';
	srand(static_cast<unsigned int>(time(0)));

	// enemy spawn

	enemy_spawn(map, enemyX, enemyY);

	// moves
	while (true) {
		printStuff(map, mapY, mapX);
		if (score == 999) {
			system("cls");
			cout << "to unclock next location pay 300$ buck";
			MapClear(map, mapY, mapX);
			break;
		}
		cout << "SCORE: " << score << "/999";
		//enemy moves
		if (_kbhit()) {
			key = _getch();
			switch (key) {
			case 's': {// s

				if (heroY == enemyY && heroX == enemyX) {
					gameover(score, temp);
					map[heroY][heroX] = ' ';
					MapClear(map, mapY, mapX);

				}
				if (map[heroY + 1][heroX] == '0') {
					gameover(score, temp);
					map[heroY + 1][heroX] = ' ';
					map[heroY][heroX] = ' ';
					MapClear(map, mapY, mapX);

				}
				else if (map[heroY + 1][heroX] != '#' && map[heroY + 1][heroX] != '|') {
					heroY++;
					if (map[heroY][heroX] == '.') {
						score++;
						map[heroY - 1][heroX] = ' ';
						map[heroY][heroX] = 'H';
					}
					if (heroY >= 0 && map[heroY - 1][heroX] != '0') {
						map[heroY - 1][heroX] = ' ';
						map[heroY][heroX] = 'H';
					}
					else if (map[heroY - 1][heroX] == '0') {
						gameover(score, temp);
						map[heroY - 1][heroX] = ' ';
						map[heroY][heroX] = ' ';
						MapClear(map, mapY, mapX);

					}
				}
				break;
			}


			case 'w': {
				if (heroY == enemyY && heroX == enemyX) {
					gameover(score, temp);
					map[heroY][heroX] = ' ';
					MapClear(map, mapY, mapX);

				}
				if (map[heroY - 1][heroX] == '0') {
					gameover(score, temp);
					map[heroY - 1][heroX] = ' ';
					map[heroY][heroX] = ' ';
					MapClear(map, mapY, mapX);

				}
				else if (map[heroY - 1][heroX] != '#' && map[heroY - 1][heroX] != '|') {
					heroY--;
					if (map[heroY][heroX] == '.') {
						score++;
						map[heroY + 1][heroX] = ' ';
						map[heroY][heroX] = 'H';
					}
					if (heroY >= 0 && map[heroY + 1][heroX] != '0') {
						map[heroY + 1][heroX] = ' ';
						map[heroY][heroX] = 'H';
					}
					else if (map[heroY + 1][heroX] == '0') {
						gameover(score, temp);
						map[heroY + 1][heroX] = ' ';
						map[heroY][heroX] = ' ';
						MapClear(map, mapY, mapX);

					}
				}
				break;
			}

			case 'd': {              //d
				if (heroY == enemyY && heroX == enemyX) {
					gameover(score, temp);
					map[heroY][heroX] = ' ';
					MapClear(map, mapY, mapX);

				}
				if (map[heroY][heroX + 1] == '0') {
					gameover(score, temp);
					map[heroY][heroX + 1] = ' ';
					map[heroY][heroX] = ' ';
					MapClear(map, mapY, mapX);

				}
				else if (map[heroY][heroX + 1] != '#' && map[heroY][heroX + 1] != '|') {
					heroX++;
					if (map[heroY][heroX] == '.') {
						score++;
						map[heroY][heroX - 1] = ' ';
						map[heroY][heroX] = 'H';
					}
					if (heroX >= 0 && map[heroY][heroX - 1] != '0') {
						map[heroY][heroX - 1] = ' ';
						map[heroY][heroX] = 'H';
					}
					else if (map[heroY][heroX - 1] == '0') {
						gameover(score, temp);
						map[heroY][heroX - 1] = ' ';
						map[heroY][heroX] = ' ';
						MapClear(map, mapY, mapX);

					}
				}
				break;
			}

			case 'a': {                        //a
				if (heroY == enemyY && heroX == enemyX) {
					gameover(score, temp);
					map[heroY][heroX] = ' ';
					MapClear(map, mapY, mapX);

				}
				if (map[heroY][heroX - 1] == '0') {
					gameover(score, temp);
					map[heroY][heroX - 1] = ' ';
					map[heroY][heroX] = ' ';
					MapClear(map, mapY, mapX);

				}
				else if (map[heroY][heroX - 1] != '#' && map[heroY][heroX - 1] != '|') {
					heroX--;
					if (map[heroY][heroX] == '.') {
						score++;
						map[heroY][heroX + 1] = ' ';
						map[heroY][heroX] = 'H';
					}
					if (heroX >= 0 && map[heroY][heroX + 1] != '0') {
						map[heroY][heroX + 1] = ' ';
						map[heroY][heroX] = 'H';
					}
					else if (map[heroY][heroX + 1] == '0') {
						gameover(score, temp);
						map[heroY][heroX + 1] = ' ';
						map[heroY][heroX] = ' ';
						MapClear(map, mapY, mapX);

					}
				}
				break;
			}

			}

		}

		if ((enemyY == heroY && enemyX == heroX) || temp > 0) {
			gameover(score, temp);
			map[enemyY][enemyX] = ' ';
			break;
		}
		enemy_move(map, enemyX, enemyY, heroY, heroX, score, mapY, mapX, temp);

		temp = 0;
	}

}

int main() {

	srand((unsigned)time(NULL));

	const int  mapY = 21, mapX = 31;

	char** map = new char* [mapY];
	for (int i = 0; i < mapY; i++) {
		map[i] = new char[mapX];
	}

	int enemyX = rand() % mapX, enemyY = rand() % mapY;

	cout << "press any key to start the game" << endl;
	char ch = _getch();

	while (ch != 27) {
		system("cls");
		cout << "\nStart new game?";
		cout << "\n 1 - yes" << "\n 2 - no" << "\nesc - exit";
		ch = _getch();
		if (ch == '1') {
			mapmake(map, mapY, mapX);
			movements(map, mapY, mapX, enemyX, enemyY);
			Sleep(1000);
		}
		else if (ch == '2') {
			system("cls");
			cout << "Thanks for the game";
			break;
		}
	}
}

void mapmake(char** map, int mapY, int mapX) {
	int x(0);

	for (int i = 0; i < mapY; i++) { // Массив заполняется землей
		for (int j = 0; j < mapX; j++) {
			map[i][j] = ' ';
		}
	}
	for (int i = 0; i < mapY; i++) {  // верхняя и нижняя граница
		for (int j = 0; j < mapX; j++) {
			map[i][j] = '#';
		}
		i += mapY - 2;
	}
	for (int j = 0; j < mapX; j++) { // правая и левая граница
		for (int i = 1; i < mapY - 1; i++) {
			map[i][j] = '|';
		}
		j += mapX - 2;
	}
	while (x < 5) {
		for (int i = (mapY / 2) - 1; i < 1 + rand() % mapY; i++) { // wtynh
			for (int j = (mapX / 2) - 1; j < 1 + rand() % mapX; j++) {

				map[i][j] = '#';
			}
		}

		for (int i = mapY - 4; i > rand() % mapY; i--) {//нп
			for (int j = mapX - 4; j > rand() % mapX; j--) {

				map[i][j] = '#';
			}
		}

		for (int i = mapY - 4; i > rand() % mapY; i--) { // нл
			for (int j = 3; j < rand() % mapX; j++) {
				map[i][j] = '#';
			}
		}

		for (int i = 3; i < rand() % mapY; i++) { // вл
			for (int j = 3; j < rand() % mapX; j++) {
				map[i][j] = '#';
			}
		}

		for (int i = 3; i < rand() % mapY; i++) { // вп
			for (int j = mapX - 4; j > rand() % 31; j--) {
				map[i][j] = '#';
			}
		}
		x++;
	}
}

